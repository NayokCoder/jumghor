"use client";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import postAllproduct from "@/app/lib/postAllproduct";
import { Star, ShoppingCart, Eye, Package } from "lucide-react";

const ToyCard = ({ toy }) => {
  console.log(toy);
  // Parse images from JSON string or handle URL string
  let images = [];
  let firstImage = null;

  if (toy.images) {
    try {
      // Try to parse as JSON array first
      images = JSON.parse(toy.images);
      if (Array.isArray(images) && images.length > 0) {
        firstImage = images[0];
      }
    } catch (error) {
      // If JSON parsing fails, treat as single URL string
      if (typeof toy.images === "string" && toy.images.startsWith("http")) {
        firstImage = toy.images;
        images = [toy.images];
      }
    }
  }

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2">
      <div className="relative">
        {firstImage ? (
          <Image
            src={firstImage}
            alt={toy.title}
            width={300}
            height={200}
            className="w-full h-56 object-cover"
            onError={(e) => {
              e.target.style.display = "none";
              e.target.nextSibling.style.display = "flex";
            }}
          />
        ) : null}

        {/* Fallback placeholder div */}
        <div className={`w-full h-56 bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center ${firstImage ? "hidden" : "flex"}`} style={{ display: firstImage ? "none" : "flex" }}>
          <div className="text-center text-gray-500">
            <Package className="w-12 h-12 mx-auto mb-2 opacity-50" />
            <p className="text-sm font-medium">No Image Available</p>
          </div>
        </div>
        {toy.discount_price && <div className="absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded-lg text-sm font-semibold">SALE</div>}
        <div className="absolute top-3 right-3 bg-black bg-opacity-20 rounded-full p-2">
          <div className="flex items-center text-white text-sm">
            <Star className="w-4 h-4 fill-yellow-400 text-yellow-400 mr-1" />
            <span>{toy.rating || "4.5"}</span>
          </div>
        </div>
      </div>

      <div className="p-5">
        <div className="mb-3">
          <h3 className="text-lg font-bold text-gray-800 line-clamp-2 mb-2">{toy.title}</h3>
          <p className="text-sm text-gray-500 capitalize">{toy.categories || "Toys"}</p>
          {toy.ages && toy.ages !== "0" && <p className="text-xs text-blue-600 font-medium">Age: {toy.ages}+</p>}
        </div>

        <div className="flex items-center justify-between mb-4">
          <div className="flex flex-col">
            {toy.discount_price ? (
              <>
                <span className="text-xl font-bold text-green-600">${toy.discount_price}</span>
                <span className="text-sm text-gray-500 line-through">${toy.price}</span>
              </>
            ) : (
              <span className="text-xl font-bold text-green-600">${toy.price}</span>
            )}
          </div>
          <div className="flex items-center text-sm text-gray-600">
            <Package className="w-4 h-4 mr-1" />
            <span>{toy.stock || 0} left</span>
          </div>
        </div>

        <div className="flex gap-2">
          <button className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center text-sm font-medium">
            <Eye className="w-4 h-4 mr-2" />
            View
          </button>
          <button className="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center justify-center text-sm font-medium">
            <ShoppingCart className="w-4 h-4 mr-2" />
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  );
};

const LoadingSkeleton = () => (
  <div className="bg-white rounded-xl shadow-lg overflow-hidden">
    <div className="animate-pulse">
      <div className="h-56 bg-gray-300"></div>
      <div className="p-5">
        <div className="h-4 bg-gray-300 rounded mb-2"></div>
        <div className="h-3 bg-gray-300 rounded w-2/3 mb-4"></div>
        <div className="flex justify-between mb-4">
          <div className="h-6 bg-gray-300 rounded w-1/3"></div>
          <div className="h-4 bg-gray-300 rounded w-1/4"></div>
        </div>
        <div className="flex gap-2">
          <div className="flex-1 h-8 bg-gray-300 rounded-lg"></div>
          <div className="flex-1 h-8 bg-gray-300 rounded-lg"></div>
        </div>
      </div>
    </div>
  </div>
);

const Page = () => {
  const [toys, setToys] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchToys = async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await postAllproduct();

        // Handle the API response structure {success: true, data: [...]}
        if (response.success && response.data) {
          setToys(response.data[0] || []); // response.data is an array with results in first element
        } else {
          setError("No products found");
        }
      } catch (error) {
        console.error("Error fetching toys:", error);
        setError("Failed to load products. Please try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchToys();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">All Toys</h1>
            <p className="text-gray-600">Discover amazing toys for every age</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {[...Array(8)].map((_, index) => (
              <LoadingSkeleton key={index} />
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-gray-800 mb-4">All Toys</h1>
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto">
              <p className="text-red-600">{error}</p>
              <button onClick={() => window.location.reload()} className="mt-4 bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">All Toys</h1>
          <p className="text-gray-600 mb-6">Discover amazing toys for every age</p>
          <div className="flex items-center justify-center text-sm text-gray-500">
            <Package className="w-4 h-4 mr-2" />
            <span>{toys.length} products available</span>
          </div>
        </div>

        {toys.length === 0 ? (
          <div className="text-center py-12">
            <Package className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-600 mb-2">No products found</h3>
            <p className="text-gray-500">Check back later for new arrivals!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {toys.map((toy, index) => (
              <ToyCard key={toy.id || index} toy={toy} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Page;
